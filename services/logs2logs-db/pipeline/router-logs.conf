input {
  udp {
    port => 5140
    type => udp
    queue_size => 5000
    receive_buffer_bytes => 26214400
  }
  http {
    id => "http_input"
    type => http
    user => "${LOGSTASH_USERNAME}"
    password => "${LOGSTASH_PASSWORD}"
  }
  relp {
    port => 5140
    type => tcp
  }
}

filter {
  if [message] =~ "haproxy\[(\d*)\]:" {
    mutate {
      replace => { "type" => "haproxy" }
    }
    grok {
      match => ["message", "(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) %{SYSLOGPROG}: %{HAPROXYHTTPBASE}"]
    }
    grok {
      match => ["captured_request_headers", "%{URIHOST:request_header_host}\|%{GREEDYDATA:request_header_useragent}"]
    }
    grok {
      match => ["backend_name", "%{NOTSPACE:haproxy_backend}:%{NOTSPACE:openshift_project}:%{NOTSPACE:openshift_route}"]
    }
    grok {
      match => ["server_name", "pod:%{NOTSPACE:openshift_pod}:%{NOTSPACE:openshift_service}:%{NOTSPACE:openshift_pod_ip}:%{NOTSPACE:openshift_pod_port}"]
    }
    if ![openshift_project] {
      mutate {
        add_field => { "openshift_project" => "noproject" }
      }
    }
  } else {
    mutate {
      replace => { "type" => "syslog" }
    }
    grok {
      match => { "message" => [
          # Drupal
          "<%{NONNEGINT:syslog_pri}>%{SYSLOGBASE} %{URI:uri}\|%{NUMBER:unixtimestamp}\|%{GREEDYDATA:module}\|%{IP:clientip}\|%{URI:request_uri}\|%{DATA:referer}\|%{DATA:uid}\|%{DATA:link}\|%{GREEDYDATA:message}",
          # Fallback: Just save the message
          "<%{NONNEGINT:syslog_pri}>%{SYSLOGBASE} %{GREEDYDATA:message}"
        ] }
      overwrite => [ "message" ]
    }
    syslog_pri { }
  }

}

output {
  stdout {
    codec => rubydebug
  }
  elasticsearch {
    user => admin
    password => "${LOGSDB_ADMIN_PASSWORD}"
    hosts => ["${ELASTICSEARCH_URL}"]
    index => "router-logs-%{[openshift_project]}-%{+YYYY.MM}"
    template => "/usr/share/logstash/templates/router-logs.json"
    template_name => "router-logs"
    template_overwrite => true
  }
}
